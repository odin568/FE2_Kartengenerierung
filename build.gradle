plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'idea'
}

// Use LTS version
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

// GitHub-Version >> Docker Version >> Fallback
if (System.getenv("RELEASE_VERSION")) {
	version = System.getenv("RELEASE_VERSION")
}
else if (project.hasProperty("RELEASE_VERSION") && project.getProperty("RELEASE_VERSION") && !project.getProperty("RELEASE_VERSION").allWhitespace) {
	version = project.getProperty("RELEASE_VERSION")
}
else {
	version = "SNAPSHOT"
}
println("Building version $version")

// Omit version number in artifacts for simpler releases
bootJar.archiveFileName = "FE2_Kartengenerierung.jar"

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.google.maps:google-maps-services:0.18.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

springBoot {
	buildInfo()
}

// Create zip containing WinSW ServiceWrapper and Jar File
task packageDistribution(type: Zip) {
	archiveFileName = "FE2_Kartengenerierung_WinSW.zip"
	destinationDirectory = file("$buildDir/dist")

	from "$buildDir/../deploy/winsw", "$buildDir/libs"
	dependsOn(assemble)
}
// Adapt docker-compose.yml with correct version
task adaptDockerCompose(type: Copy) {
	from "$buildDir/../deploy/docker/docker-compose.yml"
	into "$buildDir/dist"
	filter { line -> line.replaceAll('latest', version) }
}

build.dependsOn(adaptDockerCompose)
build.dependsOn(packageDistribution)
